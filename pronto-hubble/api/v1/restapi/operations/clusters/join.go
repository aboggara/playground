// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// JoinHandlerFunc turns a function with the right signature into a join handler
type JoinHandlerFunc func(JoinParams) middleware.Responder

// Handle executing the request and returning a response
func (fn JoinHandlerFunc) Handle(params JoinParams) middleware.Responder {
	return fn(params)
}

// JoinHandler interface for that can handle valid join params
type JoinHandler interface {
	Handle(JoinParams) middleware.Responder
}

// NewJoin creates a new http.Handler for the join operation
func NewJoin(ctx *middleware.Context, handler JoinHandler) *Join {
	return &Join{Context: ctx, Handler: handler}
}

/*Join swagger:route PUT /clusters/{id}/join clusters join

Join join API

*/
type Join struct {
	Context *middleware.Context
	Handler JoinHandler
}

func (o *Join) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewJoinParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
